local anim_walk = hash("walking")
local anim_idle = hash("idle")
local anim_walking_back = hash("walking_back")
local anim_idle_back = hash("idle_back")
local anim_walking_left = hash("walking_left")
local anim_idle_left = hash("idle_left")
local anim_walking_right = hash("walking_right")
local anim_idle_right = hash("idle_right")
local max_speed = 2
local group_wall = hash("collisionobject")

function init(self)
	msg.post(".", "acquire_input_focus")
	self.direction = vmath.vector3(0, 0, 0)
	self.correction = vmath.vector3()
	self.speed = 5
	self.anim = nil
	self.isLookingUp = false
	self.isLookingLeft = false
	self.isLookingRight = false
	self.colliding_with_wall = false
	self.cantGoUp = false
	self.cantGoDown = false
	self.cantGoRight = false
	
	msg.post("camera", "acquire_camera_focus")
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function update_animations(self, position)
		
end

function update(self, dt)
	local position = go.get_position()
	position = position + self.direction * max_speed
	go.set_position(position)
	self.correction = vmath.vector3()

	if self.direction.y < 0 then
		play_animation(self, anim_walk)
	elseif self.direction.y > 0 then
		play_animation(self, anim_walking_back)
	elseif self.direction.y == 0 and self.isLookingUp then
		play_animation(self, anim_idle_back)
	elseif self.direction.x < 0 then
		play_animation(self, anim_walking_left)
	elseif self.direction.x == 0 and self.isLookingLeft then
		play_animation(self, anim_idle_left)
	elseif self.direction.x > 0 then
		play_animation(self, anim_walking_right)
	elseif self.direction.x == 0 and self.isLookingRight then
		play_animation(self, anim_idle_right)
	else
		play_animation(self, anim_idle)
	end	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("walls") then
			if self.direction.y > 0 and message.normal.y < 0 then
				self.cantGoUp = true
			elseif self.direction.y < 0 and message.normal.y > 0 then
				self.cantGoDown = true
			elseif self.direction.x > 0 and message.normal.x < 0 then
				self.cantGoRight = true
			elseif self.direction.x < 0 and message.normal.x > 0 then
				self.cantGoLeft = true
			end
		end
	end			
end

function on_input(self, action_id, action)
	if action.pressed then
		self.moving = true
		self.direction = vmath.vector3(0, 0, 0)
		if action_id == hash("left") then
			self.direction.x = -1
			self.isLookingLeft = true
			self.isLookingUp = false
			self.isLookingRight = false
			self.cantGoUp = false
			self.cantGoDown = false
			self.cantGoRight = false
		elseif action_id == hash("right") then
			self.direction.x = 1
			self.isLookingRight = true
			self.isLookingLeft = false
			self.isLookingUp = false
			self.cantGoUp = false
			self.cantGoDown = false
			self.cantGoLeft = false
		elseif action_id == hash("up") and not self.cantGoUp then
			self.direction.y = 1
			self.isLookingUp = true
			self.isLookingLeft = false
			self.isLookingRight = false
			self.cantGoDown = false
			self.cantGoRight = false
			self.cantGoLeft = false
		elseif action_id == hash("down") and not self.cantGoDown then
			self.direction.y = -1
			self.isLookingUp = false
			self.isLookingLeft = false
			self.isLookingRight = false
			self.cantGoDown = false
			self.cantGoUp = false
			self.cantGoRight = false
			self.cantGoLeft = false
		end
	elseif action.released then
		self.direction = vmath.vector3(0)
	end
	
	if self.cantGoUp and action_id == hash("up") then
		self.direction = vmath.vector3(0)
	elseif self.cantGoDown and action_id == hash("down") then
		self.direction = vmath.vector3(0)
	elseif self.cantGoRight and action_id == hash("right") then
		self.direction = vmath.vector3(0)
	elseif self.cantGoLeft and action_id == hash("left") then
		self.direction = vmath.vector3(0)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
